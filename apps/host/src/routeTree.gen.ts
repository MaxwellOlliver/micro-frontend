/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as UsersRegistrationImport } from './routes/users/registration'
import { Route as DashboardProductsImport } from './routes/dashboard/products'
import { Route as DashboardCartsImport } from './routes/dashboard/carts'

// Create/Update Routes

const UsersRegistrationRoute = UsersRegistrationImport.update({
  id: '/users/registration',
  path: '/users/registration',
  getParentRoute: () => rootRoute,
} as any)

const DashboardProductsRoute = DashboardProductsImport.update({
  id: '/dashboard/products',
  path: '/dashboard/products',
  getParentRoute: () => rootRoute,
} as any)

const DashboardCartsRoute = DashboardCartsImport.update({
  id: '/dashboard/carts',
  path: '/dashboard/carts',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/dashboard/carts': {
      id: '/dashboard/carts'
      path: '/dashboard/carts'
      fullPath: '/dashboard/carts'
      preLoaderRoute: typeof DashboardCartsImport
      parentRoute: typeof rootRoute
    }
    '/dashboard/products': {
      id: '/dashboard/products'
      path: '/dashboard/products'
      fullPath: '/dashboard/products'
      preLoaderRoute: typeof DashboardProductsImport
      parentRoute: typeof rootRoute
    }
    '/users/registration': {
      id: '/users/registration'
      path: '/users/registration'
      fullPath: '/users/registration'
      preLoaderRoute: typeof UsersRegistrationImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/dashboard/carts': typeof DashboardCartsRoute
  '/dashboard/products': typeof DashboardProductsRoute
  '/users/registration': typeof UsersRegistrationRoute
}

export interface FileRoutesByTo {
  '/dashboard/carts': typeof DashboardCartsRoute
  '/dashboard/products': typeof DashboardProductsRoute
  '/users/registration': typeof UsersRegistrationRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/dashboard/carts': typeof DashboardCartsRoute
  '/dashboard/products': typeof DashboardProductsRoute
  '/users/registration': typeof UsersRegistrationRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/dashboard/carts' | '/dashboard/products' | '/users/registration'
  fileRoutesByTo: FileRoutesByTo
  to: '/dashboard/carts' | '/dashboard/products' | '/users/registration'
  id:
    | '__root__'
    | '/dashboard/carts'
    | '/dashboard/products'
    | '/users/registration'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  DashboardCartsRoute: typeof DashboardCartsRoute
  DashboardProductsRoute: typeof DashboardProductsRoute
  UsersRegistrationRoute: typeof UsersRegistrationRoute
}

const rootRouteChildren: RootRouteChildren = {
  DashboardCartsRoute: DashboardCartsRoute,
  DashboardProductsRoute: DashboardProductsRoute,
  UsersRegistrationRoute: UsersRegistrationRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/dashboard/carts",
        "/dashboard/products",
        "/users/registration"
      ]
    },
    "/dashboard/carts": {
      "filePath": "dashboard/carts.ts"
    },
    "/dashboard/products": {
      "filePath": "dashboard/products.ts"
    },
    "/users/registration": {
      "filePath": "users/registration.ts"
    }
  }
}
ROUTE_MANIFEST_END */
